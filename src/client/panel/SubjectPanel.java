package client.panel;

import model.Subject;
import service.SubjectService;

import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.rmi.RemoteException;
import java.util.List;

public class SubjectPanel extends JPanel {

    private final SubjectService subjectService;
    private JTable subjectTable;
    private DefaultTableModel model;

    public SubjectPanel(SubjectService subjectService) {
        this.subjectService = subjectService;

        setLayout(new BorderLayout(15, 15));
        setBackground(new Color(240, 248, 255));
        setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        // ============================
        // Ti√™u ƒë·ªÅ
        // ============================
        JLabel title = new JLabel("üìö Qu·∫£n L√Ω M√¥n H·ªçc", SwingConstants.CENTER);
        title.setFont(new Font("Segoe UI", Font.BOLD, 22));
        title.setForeground(new Color(41, 128, 185));
        add(title, BorderLayout.NORTH);

        // ============================
        // B·∫£ng d·ªØ li·ªáu
        // ============================
        model = new DefaultTableModel(new Object[]{"M√£ m√¥n", "T√™n m√¥n", "S·ªë l∆∞·ª£ng ƒêK", "S·ªë t√≠n ch·ªâ"}, 0) {
            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        subjectTable = new JTable(model);
        subjectTable.setRowHeight(28);
        subjectTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        subjectTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 15));
        subjectTable.getTableHeader().setBackground(new Color(52, 152, 219));
        subjectTable.getTableHeader().setForeground(Color.WHITE);
        subjectTable.setSelectionBackground(new Color(155, 203, 255));
        subjectTable.setBorder(new LineBorder(new Color(200, 200, 200)));

        JScrollPane scrollPane = new JScrollPane(subjectTable);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(180, 180, 180), 1));
        add(scrollPane, BorderLayout.CENTER);

        // ============================
        // Thanh c√¥ng c·ª•
        // ============================
        JPanel toolPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        toolPanel.setBackground(new Color(240, 248, 255));

        JButton btnAdd = createButton("‚ûï Th√™m", new Color(46, 204, 113));
        JButton btnEdit = createButton("‚úèÔ∏è S·ª≠a", new Color(241, 196, 15));
        JButton btnDelete = createButton("üóë X√≥a", new Color(231, 76, 60));
        JButton btnRefresh = createButton("üîÑ L√†m m·ªõi", new Color(52, 152, 219));

        toolPanel.add(btnAdd);
        toolPanel.add(btnEdit);
        toolPanel.add(btnDelete);
        toolPanel.add(btnRefresh);

        add(toolPanel, BorderLayout.SOUTH);

        // ============================
        // Load d·ªØ li·ªáu
        // ============================
        loadSubjects();

        // ============================
        // S·ª± ki·ªán
        // ============================
        btnAdd.addActionListener(e -> addSubjectDialog());
        btnEdit.addActionListener(e -> editSubjectDialog());
        btnDelete.addActionListener(e -> deleteSubjectAction());
        btnRefresh.addActionListener(e -> loadSubjects());
    }

    private JButton createButton(String text, Color bg) {
        JButton btn = new JButton(text);
        btn.setFocusPainted(false);
        btn.setBackground(bg);
        btn.setForeground(Color.WHITE);
        btn.setFont(new Font("Segoe UI", Font.BOLD, 13));
        btn.setPreferredSize(new Dimension(120, 38));
        btn.setBorder(new LineBorder(Color.DARK_GRAY, 1, true));
        btn.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return btn;
    }

    private void loadSubjects() {
        try {
            model.setRowCount(0);
            List<Subject> subjects = subjectService.getAllSubjects();
            for (Subject s : subjects) {
                model.addRow(new Object[]{s.getMaMon(), s.getTenMon(), s.getSoLuongDangKy(), s.getSoTinChi()});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‚ùå L·ªói load m√¥n h·ªçc: " + e.getMessage());
        }
    }

    private void addSubjectDialog() {
        JTextField txtMaMon = new JTextField();
        JTextField txtTenMon = new JTextField();
        JTextField txtSoTinChi = new JTextField();

        JPanel panel = createFormPanel(
                new String[]{"M√£ m√¥n:", "T√™n m√¥n:", "S·ªë t√≠n ch·ªâ:"},
                new JComponent[]{txtMaMon, txtTenMon, txtSoTinChi}
        );

        int result = JOptionPane.showConfirmDialog(this, panel,
                "‚ûï Th√™m M√¥n H·ªçc", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            try {
                Subject s = new Subject(txtMaMon.getText(), txtTenMon.getText(), 0, Integer.parseInt(txtSoTinChi.getText()));
                subjectService.addSubject(s);
                JOptionPane.showMessageDialog(this, "‚úÖ Th√™m m√¥n h·ªçc th√†nh c√¥ng!");
                loadSubjects();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "‚ùå L·ªói th√™m m√¥n h·ªçc: " + ex.getMessage());
            }
        }
    }

    private void editSubjectDialog() {
        int row = subjectTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "‚ö† Vui l√≤ng ch·ªçn m√¥n h·ªçc ƒë·ªÉ s·ª≠a!");
            return;
        }

        JTextField txtMaMon = new JTextField(model.getValueAt(row, 0).toString());
        txtMaMon.setEditable(false);
        JTextField txtTenMon = new JTextField(model.getValueAt(row, 1).toString());
        JTextField txtSoTinChi = new JTextField(model.getValueAt(row, 3).toString());

        JPanel panel = createFormPanel(
                new String[]{"M√£ m√¥n:", "T√™n m√¥n:", "S·ªë t√≠n ch·ªâ:"},
                new JComponent[]{txtMaMon, txtTenMon, txtSoTinChi}
        );

        int result = JOptionPane.showConfirmDialog(this, panel,
                "‚úèÔ∏è S·ª≠a M√¥n H·ªçc", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            try {
                Subject s = new Subject(txtMaMon.getText(), txtTenMon.getText(), 0, Integer.parseInt(txtSoTinChi.getText()));
                subjectService.updateSubject(s);
                JOptionPane.showMessageDialog(this, "‚úÖ C·∫≠p nh·∫≠t m√¥n h·ªçc th√†nh c√¥ng!");
                loadSubjects();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "‚ùå L·ªói c·∫≠p nh·∫≠t m√¥n h·ªçc: " + ex.getMessage());
            }
        }
    }

    private void deleteSubjectAction() {
        int row = subjectTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "‚ö† Vui l√≤ng ch·ªçn m√¥n h·ªçc ƒë·ªÉ x√≥a!");
            return;
        }

        String maMon = model.getValueAt(row, 0).toString();

        int confirm = JOptionPane.showConfirmDialog(this,
                "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m√¥n h·ªçc " + maMon + "?",
                "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                subjectService.deleteSubject(maMon);
                JOptionPane.showMessageDialog(this, "üóë X√≥a th√†nh c√¥ng!");
                loadSubjects();
            } catch (RemoteException e) {
                JOptionPane.showMessageDialog(this, "‚ùå L·ªói x√≥a m√¥n h·ªçc: " + e.getMessage());
            }
        }
    }

    private JPanel createFormPanel(String[] labels, JComponent[] fields) {
        JPanel panel = new JPanel(new GridLayout(0, 2, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        for (int i = 0; i < labels.length; i++) {
            JLabel lbl = new JLabel(labels[i]);
            lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
            panel.add(lbl);
            panel.add(fields[i]);
        }
        return panel;
    }
}
